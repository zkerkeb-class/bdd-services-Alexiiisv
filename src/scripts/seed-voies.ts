import dotenv from "dotenv";
import { faker } from "@faker-js/faker/locale/fr";
import { supabase } from "../config/supabase";

dotenv.config();

// Fonction pour nettoyer la table voies
const cleanVoies = async (): Promise<void> => {
  await supabase.from("voie").delete().neq("id", 0);
  await supabase.from("voies").delete().neq("id", 0);
  await supabase.rpc('reset_voies_id_seq');
  console.log("‚úÖ Table voies nettoy√©e avec succ√®s");
};

// Tableau des cotations et pond√©rations centr√©es sur 6a
const cotations = [
  "3a", "3b", "3c", "4a", "4b", "4c", "5a", "5b", "5c",
  "6a", "6a+", "6b", "6b+", "6c", "6c+", "7a", "7a+", "7b", "7b+", "7c", "7c+",
  "8a", "8a+", "8b", "8b+", "8c", "8c+", "9a", "9a+", "9b", "9b+", "9c", "9c+"
];

// Poids d√©croissants √† mesure qu'on s'√©loigne de 6a
const cotationWeights = [
  1, 1, 1, 2, 2, 2, 4, 5, 7, // 3-5c
  15, 12, 10, 8, 6, 4,       // 6a-6c+
  4, 3, 2, 2, 1, 1,           // 7a-7c+
  1, 1, 1, 1, 1, 1,           // 8a-8c+
  1, 1, 1, 1                  // 9a-9c+
];

// Fonction de tirage pond√©r√©
function weightedRandom(items: string[], weights: number[]): string {
  const total = weights.reduce((acc, w) => acc + w, 0);
  let r = Math.random() * total;
  for (let i = 0; i < items.length; i++) {
    if (r < weights[i]) return items[i];
    r -= weights[i];
  }
  return items[items.length - 1]; // fallback
}

// Tableau de 50 noms de voies pr√©d√©finis
const nomsDeVoies = [
  "La Travers√©e", "Le Di√®dre Bleu", "L'√âperon", "La Fissure Oubli√©e", "Le Toit Rouge",
  "La Dalle Magique", "Le Surplomb", "La Rampe", "Le Bloc Myst√®re", "La Cascade",
  "Le Pilier", "La Chemin√©e", "Le Grand Mur", "La Lame", "Le Balcon",
  "La Goutte d'Or", "Le Croissant", "La Com√®te", "Le Revers", "La Lune Blanche",
  "Le Dragon", "La Salamandre", "Le Papillon", "La Licorne", "Le Lynx",
  "La Panth√®re", "Le Faucon", "La M√©sange", "Le Chamois", "La Marmotte",
  "Le Renard", "La Chouette", "Le Hibou", "La Fourmi", "Le Scarab√©e",
  "Le Sphinx", "La Sente", "Le Filon", "La Cr√™te", "Le Canyon",
  "La Grotte", "Le Tunnel", "La Fen√™tre", "Le Balcon Secret", "La Terrasse",
  "Le Refuge", "La Source", "Le Torrent", "La Plage", "Le Rocher Perdu",
  "La For√™t", "Le Sentier Cach√©"
];

// Fonction pour g√©n√©rer une voie d'escalade al√©atoire
const generateVoie = (salleId: number) => {
  const typesDeVoie = [
    "Bloc",
    "Voie",
    "D√©vers",
    "Dalle",
    "Surplomb",
    "Di√®dre",
    "Fissure",
    "R√©glette",
    "Pince",
    "Goutte d'eau"
  ];

  const ouvreurs = [
    "Jean Dupont",
    "Marie Martin",
    "Pierre Durand",
    "Sophie Bernard",
    "Lucas Petit",
    "Emma Roux",
    "Thomas Moreau",
    "Julie Simon",
    "Nicolas Michel",
    "Camille Leroy"
  ];

  const descriptions = [
    "Voie technique avec des prises minuscules",
    "Bloc puissant sur des volumes",
    "D√©vers athl√©tique avec des crochets",
    "Dalle friction sur du granit",
    "Surplomb avec des prises g√©n√©reuses",
    "Di√®dre technique en fissure",
    "R√©glettes sur du calcaire",
    "Pinces et pinces sur du gr√®s",
    "Goutte d'eau sur des prises humides",
    "Voie mixte avec du d√©vers et de la dalle"
  ];

  return {
    salle_id: salleId,
    cotation: weightedRandom(cotations, cotationWeights),
    description: faker.helpers.arrayElement(descriptions),
    ouvreur: faker.helpers.arrayElement(ouvreurs),
    type_de_voie: faker.helpers.arrayElement(typesDeVoie),
    nom: faker.helpers.arrayElement(nomsDeVoies)
  };
};

// Fonction pour ins√©rer les voies
const insertVoies = async (): Promise<void> => {
  try {
    // Nettoyer la table avant d'ins√©rer
    await cleanVoies();

    console.log("üå± D√©but de l'insertion des voies...");

    // R√©cup√©rer les IDs des salles existantes
    const { data: salles, error: sallesError } = await supabase
      .from("salles")
      .select("id, nom");

    if (sallesError || !salles) {
      throw sallesError || new Error("Impossible de r√©cup√©rer les salles");
    }

    const salleIds = salles.map(salle => salle.id);

    // G√©n√©rer 15-25 voies par salle
    const voies = [];
    for (const salleId of salleIds) {
      const nombreVoies = faker.number.int({ min: 15, max: 25 });
      
      for (let i = 0; i < nombreVoies; i++) {
        const voie = generateVoie(salleId);
        voies.push(voie);
      }
    }

    // Ins√©rer toutes les voies
    const { error: voiesError } = await supabase
      .from("voies")
      .insert(voies);

    if (voiesError) {
      throw voiesError;
    }

    console.log(`‚úÖ ${voies.length} voies ont √©t√© cr√©√©es avec succ√®s`);
    console.log(`‚úÖ R√©partition par salle:`);
    
    for (const salle of salles) {
      const voiesDansSalle = voies.filter(voie => voie.salle_id === salle.id).length;
      console.log(`   - ${salle.nom}: ${voiesDansSalle} voies`);
    }

  } catch (err) {
    console.error("‚ùå Erreur lors de l'insertion des voies:", err);
  }
};

// Ex√©cuter le script
insertVoies(); 