import dotenv from "dotenv";
import { pool } from "../config/database";
import bcrypt from "bcrypt";
import { faker } from "@faker-js/faker/locale/fr";

dotenv.config();

// Fonction pour nettoyer la base de donn√©es
const cleanDatabase = async (): Promise<void> => {
  const client = await pool.connect();
  try {
    console.log("üßπ Nettoyage de la base de donn√©es...");
    await client.query("BEGIN");

    // Supprimer les donn√©es dans l'ordre pour respecter les contraintes de cl√©s √©trang√®res
    await client.query("DELETE FROM sessions");
    await client.query("DELETE FROM profiles");
    await client.query("DELETE FROM users");

    await client.query("COMMIT");
    console.log("‚úÖ Base de donn√©es nettoy√©e avec succ√®s");
  } catch (err) {
    await client.query("ROLLBACK");
    console.error("‚ùå Erreur lors du nettoyage de la base de donn√©es:", err);
    throw err;
  } finally {
    client.release();
  }
};

// Fonction pour g√©n√©rer un hash de mot de passe
const hashPassword = async (password: string): Promise<string> => {
  const saltRounds = 10;
  return bcrypt.hash(password, saltRounds);
};

// Fonction pour g√©n√©rer un utilisateur al√©atoire
const generateUser = () => {
  const firstName = faker.person.firstName();
  const lastName = faker.person.lastName();
  const username = faker.internet
    .userName({ firstName, lastName })
    .toLowerCase();

  return {
    username,
    email: faker.internet.email({ firstName, lastName }),
    password: faker.internet.password({ length: 12 }),
    profile: {
      first_name: firstName,
      last_name: lastName,
      bio: faker.person.bio(),
      avatar_url: null,
    },
  };
};

// G√©n√©rer 10 utilisateurs
const users = Array.from({ length: 10 }, generateUser);

// Fonction pour ins√©rer un utilisateur et son profil
const insertUserWithProfile = async (userData: any): Promise<void> => {
  const client = await pool.connect();

  try {
    // D√©marrer une transaction
    await client.query("BEGIN");

    // Hasher le mot de passe
    const passwordHash = await hashPassword(userData.password);

    // Ins√©rer l'utilisateur
    const userResult = await client.query(
      `INSERT INTO users (username, email, password_hash) 
       VALUES ($1, $2, $3) 
       RETURNING id`,
      [userData.username, userData.email, passwordHash]
    );

    const userId = userResult.rows[0].id;

    // Ins√©rer le profil
    await client.query(
      `INSERT INTO profiles (user_id, first_name, last_name, bio, avatar_url) 
       VALUES ($1, $2, $3, $4, $5)`,
      [
        userId,
        userData.profile.first_name,
        userData.profile.last_name,
        userData.profile.bio,
        userData.profile.avatar_url,
      ]
    );

    // Valider la transaction
    await client.query("COMMIT");

    console.log(`‚úÖ Utilisateur ${userData.username} cr√©√© avec succ√®s`);
  } catch (err) {
    // Annuler la transaction en cas d'erreur
    await client.query("ROLLBACK");
    console.error(
      `‚ùå Erreur lors de la cr√©ation de l'utilisateur ${userData.username}:`,
      err
    );
  } finally {
    // Lib√©rer le client
    client.release();
  }
};

// Fonction principale pour ins√©rer tous les utilisateurs
const seedUsers = async (): Promise<void> => {
  try {
    // Nettoyer la base de donn√©es avant d'ins√©rer les nouvelles donn√©es
    await cleanDatabase();

    console.log("üå± D√©but de l'insertion des utilisateurs...");

    // Ins√©rer chaque utilisateur
    for (const user of users) {
      await insertUserWithProfile(user);
    }

    console.log("‚úÖ Tous les utilisateurs ont √©t√© cr√©√©s avec succ√®s");
  } catch (err) {
    console.error("‚ùå Erreur lors de l'insertion des utilisateurs:", err);
  } finally {
    // Fermer la connexion √† la base de donn√©es
    await pool.end();
  }
};

// Ex√©cuter le script
seedUsers();
